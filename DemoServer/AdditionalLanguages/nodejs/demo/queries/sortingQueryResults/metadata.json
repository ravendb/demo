{
    "Slug": "sorting-query-results",
    "SourceFileName": "index.js",
    "Title": "Sorting Query Results",
    "DescriptionLines": [
        "**Query results can be sorted.**<br>",
        "The sorting method is specified when issuing the query.<br>",
        "Sorting is applied after the query filtering stage.<br>",
        "Multiple sorting actions can be chained.",
        "",
        "You can order the query results by:<br>",
        "<p>* A field value<br>",
        "* The resulting documents' score<br>",
        "* Aggregation values (in aggregation queries)<br>",
        "* Geographical distance (in spatial queries)<br>",
        "* Random ordering</p>"
    ],

    "Assets": [
        //TODO
        //{
        //    "Title": "Querying: Sorting",
        //    "Type" : "link",
        //    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/indexes/querying/sorting"
        //},
        {
            "Title": "Sorting query results",
            "Type" : "link",
            "Url"  : "https://github.com/ravendb/book/blob/v4.0/Ch09/Ch09.md#sorting-query-results"
        },
        //TODO
        //{
        //    "Title": "Indexes: Sorting & Collation",
        //    "Type" : "link",
        //    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/indexes/sorting-and-collation"
        //},
        {
            "Title": "Random Ordering",
            "Type" : "link",
            "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/client-api/session/querying/how-to-customize-query#randomordering"
        },
        //TODO
        //{
        //    "Title": "Order by Distance",
        //    "Type" : "link",
        //   "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/client-api/session/querying/how-to-query-a-spatial-index#orderbydistance"
        //},
        {
            "Title": "Readme - orderBy()",
            "Type" : "link",
            "Url"  : "https://github.com/ravendb/ravendb-nodejs-client#orderby--randomordering"
        }        
    ],

    "Walkthroughs": [
        {
            "Title": "Define a query",
            "Slug": "step-1",
            "DescriptionLines": [
                "* Define a query on the 'Products' collection using the Session `query()` method.",
                "",
                "* While this example relates to a dynamic query where an auto-index is created,<br>",
                "  _sorting_ can also be applied when querying using a static index."
            ],
            "Assets": [
                {
                    "Title": "Query Overview Demo",
                    "Type" : "demo",
                    "Url"  : "/nodejs/queries/query-overview"
                },
                {
                    "Title": "Readme - Querying documents",
                    "Type" : "link",
                    "Url"  : "https://github.com/ravendb/ravendb-nodejs-client#querying-documents"
                }
            ]
        },
        {
            "Title": "Filter query results",
            "Slug": "step-2",
            "DescriptionLines": [
                "* Filter the documents returned by applying some condition.",
                "",
                "* Regardless of the 'where' condition location in the query definition, _Filtering_ will always be applied in the server prior to the sorting phase.",
                "",
                "* When sorting without filtering, RavenDB will sort all of the resulting documents.<br>", 
                "  _Applying filtering is recommended_, as it reduces the number of results RavenDB needs to sort when querying over a large set of data."
            ],
            "Assets": [
                {
                    "Title": "Filtering Results - Basic Demo",
                    "Type" : "demo",
                    "Url"  : "/nodejs/queries/filtering-results-basics"
                },
                {
                    "Title": "Readme - Query methods overview",
                    "Type" : "link",
                    "Url"  : "https://github.com/ravendb/ravendb-nodejs-client#documentquery-methods-overview"
                }
                //TODO
                //{
                //    "Title": "Querying: Filtering",
                //    "Type" : "link",
                //    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/indexes/querying/filtering"
                //}
            ]
        },
        {
            "Title": "Primary sort by field value",
            "Slug": "step-3",
            "DescriptionLines": [
                "* Specify the field to sort by.<br>",
                "",
                "* Options:<br>",
                "  `orderBy()` - Order documents by ascending field values.<br>",
                "  `orderByDescending()` - Order field values in descending order.",
                "",
                "* When sorting by field value - The order is computed according to the inferred field type.<br>",
                "  Ordering type can be forced by explicitly passing an _OrderingType_ param to the 'orderBy' methods.",
                "  See example in the next step.",
                "",
                "* In the above example, the primary sorting of the documents returned by the query will be according to field _'UnitsInStock'_.",
                "  The field values will be considered as _'Long'_ when ordering the values, since this field is an integer, and no other type was specified.",
                "",
                "* See related links for details about ordering by:<br>",
                "  _Score_, _Aggregated values_, _Spatial distance_, or _Random ordering_."
            ],
            "Assets": [
                //TODO
                //{
                //    "Title": "Querying: Sorting",
                //    "Type" : "link",
                //    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/indexes/querying/sorting"
                //},
                {
                    "Title": "Sorting query results",
                    "Type" : "link",
                    "Url"  : "https://github.com/ravendb/book/blob/v4.0/Ch09/Ch09.md#sorting-query-results"
                },
                //TODO
                //{
                //    "Title": "Indexes: Sorting & Collation",
                //    "Type" : "link",
                //    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/indexes/sorting-and-collation"
                //},
                {
                    "Title": "Random Ordering",
                    "Type" : "link",
                    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/client-api/session/querying/how-to-customize-query#randomordering"
                }
                //TODO
                //{
                //   "Title": "Order by Distance",
                //   "Type" : "link",
                //   "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/client-api/session/querying/how-to-query-a-spatial-index#orderbydistance"
                //}
            ]
        },
        {
            "Title": "Secondary sort by field value",
            "Slug": "step-4",
            "DescriptionLines": [
                "* _Multiple sorting actions_ can be chained.",
                "  You can sort by one field and then perform a secondary sort on another field.",
                "  Any combination of secondary sorting is possible as the index fields are indexed independently of one another.",
                "",
                "* There is no limit on the number of sorting actions that can be chained.<br>",
                "  In the example, a secondary sort is done on the _Name_ field.",
                "",
                "* Options:<br>",
                "  `orderBy()` - Order by ascending values.<br>",
                "  `orderByDescending()` - Order values in descending order.",
                "",
                "* The order is computed according to the inferred field type, with strings defaulting to lexicographic order.",
                "  In the above example, passing _'AlphaNumeric'_ will cause the digit characters in the string to be treated as numbers and not as text.<br>",
                "",
                "* You can override the ordering type with any of the following:<br>",
                "    * 'String' (lexicographic ordering)<br>",
                "    * 'Long'<br>",
                "    * 'Double'<br>" ,
                "    * 'AlphaNumeric'",
                "",
                "* See related links for details about ordering by:<br>",
                "  _Score_, _Aggregated values_, _Spatial distance_, or _Random ordering_."
            ],
            "Assets": [
                //TODO
                //{
                //    "Title": "Querying: Sorting",
                //    "Type" : "link",
                //    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/indexes/querying/sorting"
                //},
                {
                    "Title": "Sorting query results",
                    "Type" : "link",
                    "Url"  : "https://github.com/ravendb/book/blob/v4.0/Ch09/Ch09.md#sorting-query-results"
                },
                //TODO
                //{
                //    "Title": "Indexes: Sorting & Collation",
                //    "Type" : "link",
                //    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/indexes/sorting-and-collation"
                //},
                {
                    "Title": "Random Ordering",
                    "Type" : "link",
                    "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/client-api/session/querying/how-to-customize-query#randomordering"
                }
                //TODO
                //{
                //   "Title": "Order by Distance",
                //   "Type" : "link",
                //   "Url"  : "https://ravendb.net/docs/article-page/latest/nodejs/client-api/session/querying/how-to-query-a-spatial-index#orderbydistance"
                //}
            ]
        },
        {
            "Title": "Execute the query",
            "Slug": "step-5",
            "DescriptionLines": [
                "* Execute the query by calling `all()`.",
                "",
                "* _'sortedProducts'_ will contain a list of Product entities sorted by the number of units in stock in descending order,",
                "  with a secondary sort on the product name.",
                "",
                "* The output entities returned by the query are tracked by the Session as usual.<br>"
            ],
            "Assets": [
                {
                    "Title": "Execute the Query - Query Overview Demo",
                    "Type" : "demo",
                    "Url"  : "/nodejs/queries/query-overview#step-3"
                }
            ]
        }
    ]
}
